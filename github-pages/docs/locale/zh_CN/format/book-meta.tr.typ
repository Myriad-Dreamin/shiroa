//! This file is generated by `typst-book-i18n`.
#import "/contrib/typst/i18n.typ": *
#{ // begin of translation block
  let t1 = translating([Book Metadata], flow_id: 1)
  translated((t1, ),
    [Book Metadata]
  )
  let t2 = translating([title], flow_id: 2)
  translated((t2, ),
    [title]
  )
  let t3 = translating([Specify the title of the book.], flow_id: 3)
  translated((t3, ),
    [指定书籍的名称]
  )
  let t4 = translating([authors], flow_id: 4)
  translated((t4, ),
    [authors]
  )
  let t5 = translating([Specify the author(s) of the book.], flow_id: 5)
  translated((t5, ),
    [Specify the author(s) of the book.]
  )
  let t6 = translating([summary], flow_id: 6)
  translated((t6, ),
    [summary]
  )

  let t7 = translating([Its formatting], flow_id: 7)
  let t8 = translating([is very strict and must follow the structure outlined below to allow for easy], flow_id: 8)
  let t9 = translating([parsing. Any element not specified below, be it formatting or textual, is likely], flow_id: 9)
  let t10 = translating([to be ignored at best, or may cause an error when attempting to build the book.], flow_id: 10)
  translated((t7, t8, t9, t10, ),
    [它的格式非常严格，必须遵循下面概述的结构，以便于容易解析。任何未在下面指定的元素，无论是格式还是文本，都可能被忽略，或者在尝试构建书籍时可能会导致错误。]
  )

  let t11 = translating([Prefix Chapter], flow_id: 11)
  translated((t11, ),
    [Prefix Chapter]
  )
  let t12 = translating([-], flow_id: 12)
  translated((t12, ),
    [-]
  )
  let t13 = translating([Before the main numbered chapters, prefix chapters can be added], flow_id: 13)
  translated((t13, ),
    [Before the main numbered chapters, prefix chapters can be added]
  )
  let t14 = translating([that will not be numbered. This is useful for forewords,], flow_id: 14)
  translated((t14, ),
    [that will not be numbered. This is useful for forewords,]
  )
  let t15 = translating([introductions, etc. There are, however, some constraints. Prefix chapters cannot be], flow_id: 15)
  translated((t15, ),
    [introductions, etc. There are, however, some constraints. Prefix chapters cannot be]
  )
  let t16 = translating([nested; they should all be on the root level. And you cannot add], flow_id: 16)
  translated((t16, ),
    [nested; they should all be on the root level. And you cannot add]
  )
  let t17 = translating([prefix chapters once you have added numbered chapters.], flow_id: 17)
  translated((t17, ),
    [prefix chapters once you have added numbered chapters.]
  )
  let t18 = translating([Part Title], flow_id: 18)
  translated((t18, ),
    [Part Title]
  )
  let t19 = translating([-], flow_id: 19)
  translated((t19, ),
    [-]
  )
  let t20 = translating([Headers can be used as a title for the following numbered], flow_id: 20)
  translated((t20, ),
    [Headers can be used as a title for the following numbered]
  )
  let t21 = translating([chapters. This can be used to logically separate different sections], flow_id: 21)
  translated((t21, ),
    [chapters. This can be used to logically separate different sections]
  )
  let t22 = translating([of the book. The title is rendered as unclickable text.], flow_id: 22)
  translated((t22, ),
    [of the book. The title is rendered as unclickable text.]
  )
  let t23 = translating([Titles are optional, and the numbered chapters can be broken into as many], flow_id: 23)
  translated((t23, ),
    [Titles are optional, and the numbered chapters can be broken into as many]
  )
  let t24 = translating([parts as desired.], flow_id: 24)
  translated((t24, ),
    [parts as desired.]
  )
  let t25 = translating([Numbered Chapter], flow_id: 25)
  translated((t25, ),
    [Numbered Chapter]
  )
  let t26 = translating([-], flow_id: 26)
  translated((t26, ),
    [-]
  )
  let t27 = translating([Numbered chapters outline the main content of the book], flow_id: 27)
  translated((t27, ),
    [Numbered chapters outline the main content of the book]
  )
  let t28 = translating([and can be nested, resulting in a nice hierarchy], flow_id: 28)
  translated((t28, ),
    [and can be nested, resulting in a nice hierarchy]
  )
  let t29 = translating([(chapters, sub-chapters, etc.).], flow_id: 29)
  translated((t29, ),
    [(chapters, sub-chapters, etc.).]
  )
  let t30 = translating([Numbered chapters can be denoted either], flow_id: 30)
  translated((t30, ),
    [Numbered chapters can be denoted either]
  )
  let t31 = translating([.], flow_id: 31)
  translated((t31, ),
    [.]
  )
  let t32 = translating([Suffix Chapter], flow_id: 32)
  translated((t32, ),
    [Suffix Chapter]
  )
  let t33 = translating([-], flow_id: 33)
  translated((t33, ),
    [-]
  )
  let t34 = translating([Like prefix chapters, suffix chapters are unnumbered, but they come after], flow_id: 34)
  translated((t34, ),
    [Like prefix chapters, suffix chapters are unnumbered, but they come after]
  )
  let t35 = translating([numbered chapters.], flow_id: 35)
  translated((t35, ),
    [numbered chapters.]
  )
  let t36 = translating([Draft chapters], flow_id: 36)
  translated((t36, ),
    [Draft chapters]
  )
  let t37 = translating([-], flow_id: 37)
  translated((t37, ),
    [-]
  )
  let t38 = translating([Draft chapters are chapters without a file and thus content.], flow_id: 38)
  translated((t38, ),
    [Draft chapters are chapters without a file and thus content.]
  )
  let t39 = translating([The purpose of a draft chapter is to signal future chapters still to be written.], flow_id: 39)
  translated((t39, ),
    [The purpose of a draft chapter is to signal future chapters still to be written.]
  )
  let t40 = translating([Or when still laying out the structure of the book to avoid creating the files], flow_id: 40)
  translated((t40, ),
    [Or when still laying out the structure of the book to avoid creating the files]
  )
  let t41 = translating([while you are still changing the structure of the book a lot.], flow_id: 41)
  translated((t41, ),
    [while you are still changing the structure of the book a lot.]
  )
  let t42 = translating([Draft chapters will be rendered in the HTML renderer as disabled links in the table], flow_id: 42)
  translated((t42, ),
    [Draft chapters will be rendered in the HTML renderer as disabled links in the table]
  )
  let t43 = translating([of contents, as you can see for the next chapter in the table of contents on the left.], flow_id: 43)
  translated((t43, ),
    [of contents, as you can see for the next chapter in the table of contents on the left.]
  )
  let t44 = translating([Draft chapters are written like normal chapters but without writing the path to the file.], flow_id: 44)
  translated((t44, ),
    [Draft chapters are written like normal chapters but without writing the path to the file.]
  )
  let t45 = translating([Separators], flow_id: 45)
  translated((t45, ),
    [Separators]
  )
  let t46 = translating([-], flow_id: 46)
  translated((t46, ),
    [-]
  )
  let t47 = translating([Separators can be added before, in between, and after any other element. They result], flow_id: 47)
  translated((t47, ),
    [Separators can be added before, in between, and after any other element. They result]
  )
  let t48 = translating([in an HTML rendered line in the built table of contents.], flow_id: 48)
  translated((t48, ),
    [in an HTML rendered line in the built table of contents.]
  )
  let t49 = translating([A separator is], flow_id: 49)
  translated((t49, ),
    [A separator is]
  )
  let t50 = translating([a line containing exclusively dashes and at least three of them], flow_id: 50)
  translated((t50, ),
    [a line containing exclusively dashes and at least three of them]
  )
  let t51 = translating([:], flow_id: 51)
  translated((t51, ),
    [:]
  )
  let t52 = translating([.], flow_id: 52)
  translated((t52, ),
    [.]
  )
  let t53 = translating([Example], flow_id: 53)
  translated((t53, ),
    [Example]
  )
  let t54 = translating([Below is the summary content for the], flow_id: 54)
  translated((t54, ),
    [Below is the summary content for the]
  )
  let t55 = translating([for this guide, with the resulting table], flow_id: 55)
  translated((t55, ),
    [for this guide, with the resulting table]
  )
  let t56 = translating([of contents as rendered to the left.], flow_id: 56)
  translated((t56, ),
    [of contents as rendered to the left.]
  )
  let t57 = translating([description], flow_id: 57)
  translated((t57, ),
    [description]
  )
  let t58 = translating([A description for the book, which is added as meta information in the html], flow_id: 58)
  translated((t58, ),
    [A description for the book, which is added as meta information in the html]
  )
  let t59 = translating([of each page.], flow_id: 59)
  translated((t59, ),
    [of each page.]
  )
  let t60 = translating([repository], flow_id: 60)
  translated((t60, ),
    [repository]
  )
  let t61 = translating([The github repository for the book.], flow_id: 61)
  translated((t61, ),
    [The github repository for the book.]
  )
  let t62 = translating([language], flow_id: 62)
  translated((t62, ),
    [language]
  )
  let t63 = translating([The main language of the book, which is used as a html language attribute], flow_id: 63)
  translated((t63, ),
    [The main language of the book, which is used as a html language attribute]
  )
  let t64 = translating([for example.], flow_id: 64)
  translated((t64, ),
    [for example.]
  )
} // end of translation block
#let translate = translate
